name: Build Test Package

on:
  # Manual trigger - anyone can run this
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch, tag, or commit to build from'
        required: true
        default: 'develop'
        type: string

      version_suffix:
        description: 'Version identifier (defaults to branch name + timestamp)'
        required: false
        type: string
        default: ''

      run_tests:
        description: 'Run test suite'
        required: false
        type: boolean
        default: false

      run_linting:
        description: 'Run code linting'
        required: false
        type: boolean
        default: false

      notify_slack:
        description: 'Send Slack notification when complete'
        required: false
        type: boolean
        default: false

  # Also allow API triggering
  repository_dispatch:
    types: [build-test]

jobs:
  # ============================================================================
  # VALIDATION
  # ============================================================================
  validate:
    name: Validate Build Parameters
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.version.outputs.version }}
      plugin_info: ${{ steps.info.outputs.plugin_info }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.event.client_payload.ref || 'develop' }}

      - name: Extract plugin information
        id: info
        run: |
          PLUGIN_SLUG=$(node -p "require('./package.json').name || 'popup-maker'")
          PLUGIN_NAME=$(node -p "require('./package.json').displayName || 'Popup Maker'")

          echo "plugin_info={\"slug\":\"${PLUGIN_SLUG}\",\"name\":\"${PLUGIN_NAME}\"}" >> $GITHUB_OUTPUT
          echo "📦 Building: ${PLUGIN_NAME} (${PLUGIN_SLUG})"

      - name: Generate build version
        id: version
        run: |
          REF_NAME="${{ github.event.inputs.ref || github.event.client_payload.ref || 'develop' }}"
          VERSION_SUFFIX="${{ github.event.inputs.version_suffix }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          if [ -n "$VERSION_SUFFIX" ]; then
            # User provided custom version - use as-is
            BUILD_VERSION="${VERSION_SUFFIX}"
            echo "🎯 Using custom version: ${BUILD_VERSION}"
          else
            # No custom version - use ref name (branch/tag/commit)
            # Clean the ref name for use in version
            CLEAN_REF=$(echo "$REF_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
            BUILD_VERSION="${CLEAN_REF}"
            echo "🌿 Using ref-based version: ${BUILD_VERSION}"
          fi

          echo "version=${BUILD_VERSION}" >> $GITHUB_OUTPUT
          echo "🏗️ Build version: ${BUILD_VERSION}"

  # ============================================================================
  # QUALITY CHECKS
  # ============================================================================
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.run_tests == 'true' || github.event.inputs.run_linting == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.event.client_payload.ref || 'develop' }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: composer:v2
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            packages/*/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies for quality checks..."
          composer install --no-interaction --no-progress

          if [ "${{ steps.npm-cache.outputs.cache-hit }}" != "true" ]; then
            echo "📦 Installing npm dependencies..."
            npm ci
          else
            echo "✅ npm dependencies restored from cache"
          fi

      - name: PHP Linting
        if: github.event.inputs.run_linting == 'true'
        run: |
          echo "🔍 Running PHP Code Sniffer..."
          composer run lint || echo "⚠️ PHP linting failed but continuing..."

      - name: JavaScript Linting
        if: github.event.inputs.run_linting == 'true'
        run: |
          echo "🔍 Running ESLint..."
          npm run lint:js || echo "⚠️ JavaScript linting failed but continuing..."

      - name: Run Tests
        if: github.event.inputs.run_tests == 'true'
        run: |
          echo "🧪 Running tests..."

          # PHP tests if available
          if [ -f "composer.json" ] && grep -q '"test"' composer.json; then
            composer run tests || echo "⚠️ PHP tests failed but continuing..."
          fi

          # JavaScript tests if available
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm run test:unit || echo "⚠️ JavaScript tests failed but continuing..."
          fi

  # ============================================================================
  # BUILD PACKAGE
  # ============================================================================
  build:
    name: Build Test Package
    runs-on: ubuntu-latest
    needs: [validate, quality-checks]
    if: always() && needs.validate.result == 'success'
    outputs:
      package_name: ${{ steps.package.outputs.package_name }}
      file_size: ${{ steps.package.outputs.file_size }}
      artifact_name: ${{ steps.upload_info.outputs.artifact_name }}
      artifact_url: ${{ steps.upload.outputs.artifact-url }}
      commit_hash: ${{ steps.build_info.outputs.commit_hash }}
      commit_short: ${{ steps.build_info.outputs.commit_short }}
      changelog_content: ${{ steps.build_info.outputs.changelog_content }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.event.client_payload.ref || 'develop' }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: composer:v2
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        id: npm-cache-build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            packages/*/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Capture build information
        id: build_info
        run: |
          # Capture commit information BEFORE modifying files
          COMMIT_HASH=$(git rev-parse HEAD)
          COMMIT_SHORT=$(git rev-parse --short HEAD)

          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "commit_short=${COMMIT_SHORT}" >> $GITHUB_OUTPUT

          # Extract changelog content using update-changelog.js script
          if [ -f "CHANGELOG.md" ] && [ -f "bin/update-changelog.js" ]; then
            echo "📝 Extracting changelog using update-changelog.js..."

            # Use the official script to get formatted changelog content
            # We use a dummy version to trigger extraction without file modification
            CHANGELOG_CONTENT=$(node bin/update-changelog.js "0.0.0-build" --verbose 2>/dev/null | grep -A 100 "Unreleased Changes:" | tail -n +2 || true)

            # If the script approach fails, fall back to direct parsing
            if [ -z "$CHANGELOG_CONTENT" ]; then
              echo "Script extraction failed, using direct CHANGELOG.md parsing..."

              # Extract Unreleased section directly
              CHANGELOG_CONTENT=$(awk '/^## Unreleased/,/^## [^U]/ {
                if (/^## Unreleased/) next
                if (/^## [^U]/) exit
                if (/^\*\*/ || /^-   / || /^   -/) print
              }' CHANGELOG.md | head -10)

              # Clean up formatting for Slack
              if [ -n "$CHANGELOG_CONTENT" ]; then
                CHANGELOG_CONTENT=$(echo "$CHANGELOG_CONTENT" | sed 's/^-   /• /' | sed 's/^   -/  - /' | grep -v '^\*\*')
              fi
            else
              # Convert numbered list to bullet points for Slack
              CHANGELOG_CONTENT=$(echo "$CHANGELOG_CONTENT" | sed 's/^[0-9]\+\. /• /' | head -8)
            fi

            # Fallback to git commits if still empty
            if [ -z "$CHANGELOG_CONTENT" ]; then
              echo "CHANGELOG.md empty, using recent commits as fallback..."
              CHANGELOG_CONTENT=$(git log --oneline -4 --pretty=format:"• %s" --grep="^feat\|^fix\|^perf\|^security" --since="2 weeks ago" | head -4)
              if [ -z "$CHANGELOG_CONTENT" ]; then
                CHANGELOG_CONTENT=$(git log --oneline -4 --pretty=format:"• %s" | head -4)
              fi
            fi
          else
            echo "Missing CHANGELOG.md or bin/update-changelog.js, using recent commits..."
            CHANGELOG_CONTENT=$(git log --oneline -4 --pretty=format:"• %s" | head -4)
          fi

          # Save changelog content (handle multiline)
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "📋 Commit: ${COMMIT_SHORT}"
          echo "📝 Changelog lines: $(echo "$CHANGELOG_CONTENT" | wc -l)"

      - name: Prepare test version files
        run: |
          BUILD_VERSION="${{ needs.validate.outputs.build_version }}"
          PLUGIN_INFO='${{ needs.validate.outputs.plugin_info }}'
          PLUGIN_SLUG=$(echo "$PLUGIN_INFO" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).slug")

          echo "📝 Preparing test build version ${BUILD_VERSION}..."

          # Create temporary version files (don't commit)
          # Update version in main plugin file
          sed "s/Version:.*$/Version:           ${BUILD_VERSION}/" popup-maker.php > popup-maker.php.tmp
          sed "s/define( 'POPMAKE_VERSION'.*$/define( 'POPMAKE_VERSION', '${BUILD_VERSION}' );/" popup-maker.php.tmp > popup-maker.php.new
          mv popup-maker.php.new popup-maker.php
          rm popup-maker.php.tmp

          # Update package.json version (temporarily)
          node -e "
            const pkg = require('./package.json');
            pkg.version = '$BUILD_VERSION';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

          # Update readme.txt stable tag (temporarily)
          if [ -f "readme.txt" ]; then
            sed "s/Stable tag:.*$/Stable tag: ${BUILD_VERSION}/" readme.txt > readme.txt.tmp
            mv readme.txt.tmp readme.txt
          fi

          echo "✅ Version files prepared (not committed)"

      - name: Install production dependencies
        run: |
          echo "📦 Installing production dependencies..."
          composer install --no-dev --optimize-autoloader --no-interaction --no-progress

          if [ "${{ steps.npm-cache-build.outputs.cache-hit }}" != "true" ]; then
            echo "📦 Installing npm dependencies..."
            npm ci --include=dev  # Need dev deps for build
          else
            echo "✅ npm dependencies restored from cache"
          fi

      - name: Build production assets
        run: |
          echo "🏗️ Building production assets..."
          npm run build:production
          echo "✅ Production build complete"

      - name: Create test package
        id: package
        run: |
          BUILD_VERSION="${{ needs.validate.outputs.build_version }}"
          PLUGIN_INFO='${{ needs.validate.outputs.plugin_info }}'
          PLUGIN_SLUG=$(echo "$PLUGIN_INFO" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).slug")

          echo "📦 Creating test package..."

          # Use build-release.js if available
          if [ -f "bin/build-release.js" ]; then
            node bin/build-release.js --zip-name "${PLUGIN_SLUG}_${BUILD_VERSION}.zip"
            PACKAGE_NAME="${PLUGIN_SLUG}_${BUILD_VERSION}.zip"
          else
            # Fallback packaging
            echo "⚠️ No build-release.js found, using fallback..."

            rm -rf build
            mkdir -p build/${PLUGIN_SLUG}

            # Copy files (exclude development files)
            rsync -av --exclude-from='.distignore' \
              --exclude='build/' \
              --exclude='node_modules/' \
              --exclude='tests/' \
              --exclude='.*' \
              --exclude='composer.*' \
              --exclude='package*' \
              --exclude='webpack.config.js' \
              ./ build/${PLUGIN_SLUG}/

            cd build
            PACKAGE_NAME="${PLUGIN_SLUG}_${BUILD_VERSION}.zip"
            zip -r "../${PACKAGE_NAME}" ${PLUGIN_SLUG}/
            cd ..
          fi

          # Generate checksum
          if [ -f "$PACKAGE_NAME" ]; then
            sha256sum "$PACKAGE_NAME" > "${PACKAGE_NAME}.sha256"
            FILE_SIZE=$(ls -lh "$PACKAGE_NAME" | awk '{print $5}')

            echo "✅ Test package created: $PACKAGE_NAME ($FILE_SIZE)"
            echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
            echo "file_size=${FILE_SIZE}" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to create test package"
            exit 1
          fi

      - name: Upload test package
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ fromJson(needs.validate.outputs.plugin_info).slug }}-${{ needs.validate.outputs.build_version }}
          path: ${{ steps.package.outputs.package_name }}
          retention-days: 30

      - name: Set artifact info for summary
        id: upload_info
        run: |
          PLUGIN_INFO='${{ needs.validate.outputs.plugin_info }}'
          PLUGIN_SLUG=$(echo "$PLUGIN_INFO" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).slug")
          BUILD_VERSION="${{ needs.validate.outputs.build_version }}"
          ARTIFACT_NAME="${PLUGIN_SLUG}-${BUILD_VERSION}"

          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "📋 Artifact name: ${ARTIFACT_NAME}"

  # ============================================================================
  # SLACK NOTIFICATION
  # ============================================================================
  notify:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [validate, quality-checks, build]
    if: always() && github.event.inputs.notify_slack == 'true'

    steps:
      - name: Send success notification
        if: needs.build.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚀 ${{ fromJson(needs.validate.outputs.plugin_info).name }} ${{ needs.validate.outputs.build_version }} (${{ github.event.inputs.ref || 'develop' }}) Ready",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 ${{ fromJson(needs.validate.outputs.plugin_info).name }} ${{ needs.validate.outputs.build_version }} (${{ github.event.inputs.ref || 'develop' }}) Ready"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Version:* `${{ needs.validate.outputs.build_version }}`  •  *Source:* `${{ github.event.inputs.ref || 'develop' }}`  •  *Size:* ${{ needs.build.outputs.file_size || 'Unknown' }}\n*Quality:* ${{ needs.quality-checks.result == 'success' && '✅ All checks passed' || needs.quality-checks.result == 'skipped' && '⏭️ Checks skipped' || '⚠️ Issues found (build continued)' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*📥 Download*"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Download ZIP"
                    },
                    "url": "${{ needs.build.outputs.artifact_url || format('https://github.com/{0}/actions/runs/{1}', github.repository, github.run_id) }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ needs.build.outputs.artifact_url && '• Click *Download ZIP* above (requires GitHub login)\n• Install directly in WordPress: *Plugins → Add New → Upload*' || '• Click *Download ZIP* → scroll to *Artifacts* section → click artifact name\n• Install ZIP in WordPress: *Plugins → Add New → Upload*' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*📝 Recent Changes*\n${{ needs.build.outputs.changelog_content || '• Latest development changes\n• See full changelog for details' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|📋 Build Details>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "<https://github.com/${{ github.repository }}/blob/${{ github.event.inputs.ref || 'develop' }}/CHANGELOG.md|📖 Full Changelog>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "<https://github.com/${{ github.repository }}/commit/${{ needs.build.outputs.commit_hash }}|🔗 Source Commit>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "<https://github.com/${{ github.repository }}/tree/${{ github.event.inputs.ref || 'develop' }}|🌿 Source Branch>"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "⚠️ Test build • Available for 30 days • Requested by ${{ github.actor }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV }}

      - name: Send failure notification
        if: needs.build.result != 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "❌ Build Failed: ${{ fromJson(needs.validate.outputs.plugin_info).name }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ ${{ fromJson(needs.validate.outputs.plugin_info).name }} Build Failed"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Source:* `${{ github.event.inputs.ref || 'develop' }}`\\n*Failed at:* ${{ needs.validate.result != 'success' && 'Validation stage' || needs.quality-checks.result == 'failure' && 'Quality checks' || 'Build process' }}\\n*Requested by:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*🔍 Troubleshooting*"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Logs"
                    },
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|📋 Build Logs>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "<https://github.com/${{ github.repository }}/tree/${{ github.event.inputs.ref || 'develop' }}|🌿 Source Branch>"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "💡 Check the logs above for detailed error information"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV }}

  # ============================================================================
  # SUMMARY
  # ============================================================================
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [validate, quality-checks, build]
    if: always()

    steps:
      # Note: GitHub API artifact downloads require 'actions' scope which workflow tokens don't have
      # We'll provide clear instructions to the artifacts section instead

      - name: Generate summary
        run: |
          BUILD_VERSION="${{ needs.validate.outputs.build_version }}"
          PLUGIN_INFO='${{ needs.validate.outputs.plugin_info }}'
          PLUGIN_NAME=$(echo "$PLUGIN_INFO" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).name")

          echo "# 🔨 Test Build Summary for ${PLUGIN_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${BUILD_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Source:** ${{ github.event.inputs.ref || 'develop' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Status indicators
          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "✅ **Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.quality-checks.result }}" == "success" ]; then
            echo "✅ **Quality Checks**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.quality-checks.result }}" == "skipped" ]; then
            echo "⏭️ **Quality Checks**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Quality Checks**: Issues found (build continued)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Build**: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📥 Test Package" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "📦 **Package:** \`${{ needs.build.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "📏 **Size:** ${{ needs.build.outputs.file_size || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Artifact:** \`${{ needs.build.outputs.artifact_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ⬇️ Download Instructions" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show direct download URL if available
            if [ -n "${{ needs.build.outputs.artifact_url }}" ]; then
              echo "### 🎯 Direct Download" >> $GITHUB_STEP_SUMMARY
              echo "**[⬇️ Download Plugin ZIP](${{ needs.build.outputs.artifact_url }})**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "1. Click the download link above (requires GitHub login)" >> $GITHUB_STEP_SUMMARY
              echo "2. Install the ZIP file directly in WordPress" >> $GITHUB_STEP_SUMMARY
              echo "   - WordPress Admin → Plugins → Add New → Upload Plugin" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Alternative: Via Artifacts Section" >> $GITHUB_STEP_SUMMARY
              echo "1. Scroll down to **Artifacts** section at bottom of this workflow" >> $GITHUB_STEP_SUMMARY
              echo "2. Click on \`${{ needs.build.outputs.artifact_name }}\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 🎯 How to Download" >> $GITHUB_STEP_SUMMARY
              echo "1. Scroll down to the **Artifacts** section at the bottom of this workflow run" >> $GITHUB_STEP_SUMMARY
              echo "2. Click on \`${{ needs.build.outputs.artifact_name }}\` to download the plugin ZIP" >> $GITHUB_STEP_SUMMARY
              echo "3. Install the downloaded ZIP file directly in WordPress" >> $GITHUB_STEP_SUMMARY
              echo "   - WordPress Admin → Plugins → Add New → Upload Plugin" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⏰ **Retention:** Package will be available for **30 days**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No test package was created due to build failure." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "**Source:** [\`${{ github.event.inputs.ref || 'develop' }}\`](https://github.com/${{ github.repository }}/tree/${{ github.event.inputs.ref || 'develop' }})" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [\`${{ needs.build.outputs.commit_short }}\`](https://github.com/${{ github.repository }}/commit/${{ needs.build.outputs.commit_hash }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Recent Changes:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.build.outputs.changelog_content }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📖 **[View Full Changelog](https://github.com/${{ github.repository }}/blob/${{ github.event.inputs.ref || 'develop' }}/CHANGELOG.md)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ℹ️ Note" >> $GITHUB_STEP_SUMMARY
          echo "This is a **test build only**. No changes were committed to the repository." >> $GITHUB_STEP_SUMMARY
          echo "For official releases, use the Release workflow." >> $GITHUB_STEP_SUMMARY
